/*
 */
package cz.yadrone.attitude3d;

import de.yadrone.ARDroneProvider;
import de.yadrone.base.ARDrone;
import de.yadrone.base.navdata.AttitudeListener;
import java.awt.BorderLayout;
import java.util.logging.Logger;
import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays the 3D Window with attitude of the drone.
 * Contains a JFX panel which is capable of displaying JavaFX inside of Swing.
 * Gets the {@link RotationValuesWrapper} from the file lookup. The Rotation
 * Values Wrapper contains the required roll, pitch and yaw.
 */
@ConvertAsProperties(
        dtd = "-//cz.dfi.attitude3d//Attitude3D//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "Attitude3DTopComponent",
        iconBase = "cz/yadrone/attitude3d/iconmonstr-eye-6-16.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "speed_control_mode", openAtStartup = true)
@ActionID(category = "Window", id = "cz.yadrone.attitude3d.Attitude3DTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_Attitude3DAction",
        preferredID = "Attitude3DTopComponent"
)
@Messages({
    "CTL_Attitude3DAction=Attitude 3D",
    "CTL_Attitude3DTopComponent=Attitude 3D Panel",
    "HINT_Attitude3DTopComponent=Attitude 3D Panel displays the current pose of the drone."
})
public final class Attitude3DTopComponent extends TopComponent implements AttitudeListener {

    private static final long serialVersionUID = 1L;
    private JFXPanel fxPanel = new JFXPanel();
    private Attitude3DView view;

    public Attitude3DTopComponent() {
        initComponents();
        init();
    }

    private void init() {
        setName(Bundle.CTL_Attitude3DTopComponent());
        setToolTipText(Bundle.HINT_Attitude3DTopComponent());
        setLayout(new BorderLayout());
        add(fxPanel, BorderLayout.CENTER);
        Platform.setImplicitExit(false);
        Platform.runLater(() -> {
            createContent();
        });
    }

    private void createContent() {
        view = new Attitude3DView();
        fxPanel.setScene(view.createScene());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    void writeProperties(java.util.Properties p) {
        p.setProperty("version", "1.0");
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
    }
    private static final Logger LOGGER = Logger.getLogger(Attitude3DTopComponent.class.getName());

    @Override
    protected void componentOpened() {
        ARDrone d = ARDroneProvider.getDrone();
        activate(d);
    }

    @Override
    protected void componentClosed() {
        deactivate();
    }

    private void activate(ARDrone d) {
        d.getNavDataManager().addAttitudeListener(this);
    }

    private void deactivate() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void attitudeUpdated(float pitch, float roll, float yaw) {
        Platform.runLater(() -> {
            view.setEulerAngleRotation(pitch/1000, roll/1000, yaw/1000);
        });
    }

    @Override
    public void attitudeUpdated(float pitch, float roll) {
    }

    @Override
    public void windCompensation(float pitch, float roll) {
    }

}
